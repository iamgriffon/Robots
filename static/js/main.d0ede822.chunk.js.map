{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","phone","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","Component","connect","state","searchRobots","requestRobots","err","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d0ede822.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ name, email, id, phone }) => {\r\n  return (\r\n    <div className='tc grow bg-light-green bw2 ba bw2 br3 pa3 ma2 dib bw2 shadow-5'>\r\n      <img alt='robots' className='ba bw1' src={`https://robohash.org/${id}?set=any`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n        <p>Phone: {phone}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user, i) => {\r\n          return (\r\n            <Card\r\n              key={i}\r\n              id={robots[i].id}\r\n              name={robots[i].name}\r\n              email={robots[i].email}\r\n              phone={robots[i].phone}\r\n              />\r\n          );\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='Search your robot HERE!'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => { //Essa função recebe o parâmetro de state.\r\n  return {\r\n    searchField: state.searchRobots.searchField, //state.SearchBotos.searchField = estado._função_que_puxa_o_estado(reducers.js)._estado_a_ser_mudado.\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    err: state.requestRobots.err\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => { //essa function precisa de um parametro dispatch que é o ativa a ação do redux\r\n  return { //Se vai retornar um objeto, SEMPRE TENHA RETURN.\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // console.log(this.props.store.getState());\r\n    this.props.onRequestRobots();\r\n  }\r\n  render() {\r\n  const { searchField, onSearchChange, robots, isPending } = this.props;\r\n  const filteredRobots = robots.filter(robot =>{\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n  })\r\n    return isPending ?\r\n    <h1>Loading</h1> :\r\n    (\r\n      <div className='tc'>\r\n        <h1 className='f1'>RoboBuddies</h1>\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <CardList robots={filteredRobots} />\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App); \r\n//O connect é uma aplicação de nível maior, é uma function que vai retornar outra funtion, mas a sintaxe é assim\r\n//Os 2 parametros que ele recebe são: mapStateToProps e mapDispatchToProps,\r\n//Agora o app sabe que existe uma store, e toda vez que houver mudança de estado, ele vai monstrar interesse nessa store","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n     } from './constants.js';\r\n\r\nexport const setSearchField = (text) => {\r\n    // console.log(text);\r\n    return {\r\n        type: CHANGE_SEARCH_FIELD,\r\n        payload: text\r\n    }\r\n}\r\n\r\nexport const requestRobots = () => (dispatch) => { //Como não se trata de um objeto, nós usaremos dispatch para fazer essa function retornar outra function (para não ser um obj)\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING }); //Mandamos o primeiro parâmetro (pending)\r\n    fetch('https://jsonplaceholder.typicode.com/users') //fazemos a chamada API\r\n    .then(response => response.json()) //Pegamos a resposta e puxamos o JSON\r\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload:data })) //E daí setamos o estado para SUCCESS caso dê bom, e retornamos o payload(resultado) como data\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err })) //Caso dê ruim, o estado vira FAILED e mandamos como payload o erro.\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n//PARA LIDAR COM AJAX CALLS, É NECESSÁRIO TRABALHAR COM 3 ESTADOS (PENDING, SUCESS, E FAILED)\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n     } from './constants.js'; //Importando as constantes que criamos\r\n\r\nconst initialStateSearch = { //Armazenando o estado inicial que será usado na aplicação\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    err: ''\r\n}\r\n\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => { //Usando o estado inicial como parâmetro, e a ação como uma ação vazia (para \"zerar as ações cada vez que o Redux for ativado\")\r\n    // console.log(action.type); \r\n    switch(action.type) {  //Famoso select case\r\n        case CHANGE_SEARCH_FIELD: //Caso o estado seja alterado e as funções executadas\r\n        return {...state, searchField: action.payload}; //retorne o estado alterado e faça as ações\r\n    default:\r\n        return state;\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n    switch(action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return ({...state, isPending: true }) //Muda o estado mudado para true\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return ({...state, robots: action.payload, isPending: false }) //Muda o estado mudado para false, e altera o robots com a response da fetch (que vira payload)\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return ({...state, robots: action.payload, isPending: false }) //Muda o estado mudado para false, e altera o robots com a response da fetch (que vira payload)\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport 'tachyons';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'; //Os nomes fazem exatamente o que eles dizem LOL\r\nimport { createLogger } from 'redux-logger'; //É um logger de ações muito eficiente\r\nimport thunkMiddleware from 'redux-thunk'; //Usado para fazer chamadas AJAX no Redux\r\nimport { searchRobots, requestRobots } from './reducers'; \r\n\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger)); //Com logger\r\n// const store = createStore(rootReducer, applyMiddleware(thunkMiddleware)); //Sem logger\r\n\r\nReactDOM.render(\r\n        <Provider store={store}> \r\n        <App />, \r\n        </Provider>, document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\n// O componente Provider é um parent que vai prover o redux na nossa aplicação\r\n//A store será responsável por armazenar e fazer as mudanças de estado de maneira que não afete os outros componentes"],"sourceRoot":""}